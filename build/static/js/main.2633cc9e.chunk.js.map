{"version":3,"sources":["Components/Tools/CalculateTimer.ts","Components/Controls/Control.tsx","Components/Main/Main.tsx","Components/MainHeading.tsx","App.tsx","index.tsx"],"names":["CalculateTimer","timeInSeconds","hours","Math","floor","minutes","seconds","Controls","props","time","useState","intervalId","setIntervalId","click","setClick","className","data-testid","disabled","onClick","interval","setInterval","prev","handlePlayButton","clearInterval","Main","setTimeInSeconds","timerArray","setTimerArray","useEffect","timeArray","Control","MainHeading","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAgBeA,MAhBf,SAAwBC,GACpB,IAAIC,EAAgBC,KAAKC,MAAMH,EAAgB,MAC3CI,EAAkBF,KAAKC,OAAOH,EAAyB,KAARC,GAAiB,IAChEI,EAAkBL,EAAyB,KAARC,EAA2B,GAAVG,EAMxD,MAAO,CAHWH,EAAQ,GAAR,WAAiBA,GAAUA,EACzBG,EAAU,GAAV,WAAmBA,GAAYA,EAC/BC,EAAU,GAAV,WAAmBA,GAAYA,ICyCxCC,EA1CE,SAACC,GAAkB,IACvBC,EAAQD,EAARC,KADsB,EAEOC,mBAAiB,GAFxB,mBAEtBC,EAFsB,KAEVC,EAFU,OAGHF,oBAAkB,GAHf,mBAGtBG,EAHsB,KAGfC,EAHe,KAiC7B,OACM,sBAAKC,UAAU,qBAAf,UACM,wBAAQC,cAAY,WAAWC,SAAUJ,EAAOK,QAb9B,WACxBJ,GAAS,GAlBU,WACnB,IAAIK,EAAgBC,aAAY,WAC1BX,GAAK,SAACY,GAAD,OAAkBA,EAAK,OAChC,KAEFT,EAAcO,GAcdG,IAWM,kBACA,wBAAQN,cAAY,WAAWE,QATb,WACxBJ,GAAS,GAdTS,cAAcZ,IAsBR,kBACA,wBAAQK,cAAY,YAAYE,QApBlB,WACpBK,cAAcZ,GACdF,EAAK,IAkBC,uBCpBHe,EAnBQ,WAAoB,IAAD,EACMd,mBAAiB,GADvB,mBAC7BT,EAD6B,KACdwB,EADc,OAEAf,mBAA+B,IAF/B,mBAE7BgB,EAF6B,KAEjBC,EAFiB,KASpC,OALAC,qBAAU,WACL,IAAIC,EAAkC7B,EAAeC,GACrD0B,EAAcE,KACjB,CAAC5B,IAGG,gCACA,qBAAKc,UAAU,iBAAf,SACM,qBAAIA,UAAU,QAAd,UAAuBW,EAAW,GAAlC,IAAuCA,EAAW,GAAlD,IAAuDA,EAAW,QAExE,cAACI,EAAD,CAAUrB,KAAMgB,QCRbM,EARe,WAC1B,OACI,8BACI,oBAAIhB,UAAU,eAAd,0BCQGiB,MATf,WACE,OACE,sBAAKjB,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QCLLkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2633cc9e.chunk.js","sourcesContent":["function CalculateTimer(timeInSeconds: number): Array<number | string> {\r\n    let hours: number = Math.floor(timeInSeconds / 3600);\r\n    let minutes: number = Math.floor((timeInSeconds - (hours * 3600)) / 60);\r\n    let seconds: number = timeInSeconds - (hours * 3600) - (minutes * 60);\r\n\r\n\r\n    let hoursFormat = hours < 10 ? `0${hours}` : hours;\r\n    let minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\r\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\r\n    return [\r\n        hoursFormat,\r\n        minutesFormat,\r\n        secondsFormat\r\n    ];\r\n}\r\n\r\nexport default CalculateTimer","import React, { useState } from 'react'\r\n\r\n\r\ninterface Props  {\r\n      time: Function\r\n}\r\n\r\nconst Controls = (props: Props) => {\r\n      const {time} = props;\r\n      const [intervalId, setIntervalId] = useState<number>(0);\r\n      const [click, setClick] = useState<boolean>(false);\r\n\r\n      const handlePlayButton = () => {\r\n            let interval: any = setInterval(() => {\r\n                  time((prev:number) => (prev+1))\r\n            },1000);\r\n\r\n            setIntervalId(interval);\r\n      }\r\n\r\n      const handleStopButton = () => {\r\n            clearInterval(intervalId);\r\n      }\r\n\r\n      const handleResetButton = () => {\r\n            clearInterval(intervalId);\r\n            time(0);\r\n      }\r\n\r\n      const handlePlayButtonState = () => {\r\n            setClick(true);\r\n            handlePlayButton();\r\n      }\r\n\r\n      const handleStopButtonState = () => {\r\n            setClick(false);\r\n            handleStopButton();\r\n      }\r\n\r\n\r\n      return (\r\n            <div className=\"controls-container\">\r\n                  <button data-testid=\"btn-play\" disabled={click} onClick={handlePlayButtonState}>Play</button>\r\n                  <button data-testid=\"btn-stop\" onClick={handleStopButtonState}>Stop</button>\r\n                  <button data-testid=\"btn-reset\" onClick={handleResetButton}>Reset</button>\r\n            </div>\r\n      )\r\n}\r\n\r\nexport default Controls","import React, { useState, useEffect } from 'react'\r\nimport CalculateTimer from '../Tools/CalculateTimer';\r\nimport Controls from '../Controls/Control';\r\nimport '../../App.css'\r\n\r\nconst Main: React.FC = (): JSX.Element => {\r\n      const [timeInSeconds, setTimeInSeconds] = useState<number>(0);\r\n      const [timerArray, setTimerArray] = useState<Array<number|string>>([]);\r\n\r\n      useEffect(() => {\r\n           let timeArray: Array<number|string> = CalculateTimer(timeInSeconds);\r\n           setTimerArray(timeArray);\r\n      },[timeInSeconds])\r\n\r\n      return (\r\n            <div>\r\n            <div className=\"time-container\">\r\n                  <h1 className=\"timer\">{timerArray[0]}:{timerArray[1]}:{timerArray[2]}</h1>\r\n            </div>\r\n            <Controls time={setTimeInSeconds}/>\r\n            </div>\r\n      )\r\n}\r\n\r\nexport default Main","import React from 'react'\r\nimport \"../App.css\"\r\n\r\nconst MainHeading: React.FC = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"main-heading\">Timer App</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainHeading","import React from 'react'\nimport './App.css';\nimport Main from './Components/Main/Main';\nimport MainHeading from './Components/MainHeading';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MainHeading />\n     <Main />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}